import cv2
import face_recognition

# Load a pre-trained Haar Cascade face detector (for face detection)
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Function to detect faces in an image
def detect_faces(image):
    # Convert the image to grayscale for the detector
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Detect faces using Haar Cascade
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    
    return faces

# Function to recognize faces using the face_recognition library
def recognize_faces(image, known_face_encodings, known_face_names):
    # Convert the image to RGB (face_recognition expects RGB images)
    rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # Find all face locations in the image
    face_locations = face_recognition.face_locations(rgb_image)
    
    # Get face encodings for each face in the image
    face_encodings = face_recognition.face_encodings(rgb_image, face_locations)
    
    face_names = []
    
    for face_encoding in face_encodings:
        # Compare the face encoding with known faces
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = "Unknown"
        
        if True in matches:
            first_match_index = matches.index(True)
            name = known_face_names[first_match_index]
        
        face_names.append(name)
    
    return face_locations, face_names

# Load known face encodings and names (for the sake of simplicity, we'll hardcode one face)
known_face_encodings = []
known_face_names = []

# Example: Let's assume we have one known face, the person named 'Alice'
# Load an image of 'Alice' (you need an image of Alice for this part)
alice_image = face_recognition.load_image_file("alice.jpg")
alice_encoding = face_recognition.face_encodings(alice_image)[0]

# Add the encoding and name of Alice to the known lists
known_face_encodings.append(alice_encoding)
known_face_names.append("Alice")

# Start video capture (use 0 for the default webcam)
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    # Detect faces using Haar Cascade
    faces = detect_faces(frame)
    
    # Recognize faces using deep learning (face_recognition)
    face_locations, face_names = recognize_faces(frame, known_face_encodings, known_face_names)
    
    # Draw rectangles around detected faces and label them
    for (top, right, bottom, left), name in zip(face_locations, face_names):
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
        cv2.putText(frame, name, (left, bottom + 20), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

    # Show the resulting frame
    cv2.imshow('Face Detection and Recognition', frame)
    
    # Break the loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the capture and close the window
cap.release()
cv2.destroyAllWindows()
