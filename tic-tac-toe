import random

# Constants to represent the players
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '


class TicTacToe:
    def __init__(self):
        self.board = [EMPTY] * 9  # 9 positions for the Tic Tac Toe board
        self.current_player = PLAYER_X  # X starts the game
    
    def print_board(self):
        """Print the current state of the board."""
        for i in range(0, 9, 3):
            print(f'{self.board[i]} | {self.board[i+1]} | {self.board[i+2]}')
            if i < 6:
                print('---------')
    
    def is_winner(self, player):
        """Check if the player has won."""
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # columns
            [0, 4, 8], [2, 4, 6]              # diagonals
        ]
        return any(all(self.board[pos] == player for pos in combination) for combination in winning_combinations)
    
    def is_full(self):
        """Check if the board is full (no more moves possible)."""
        return all(cell != EMPTY for cell in self.board)
    
    def available_moves(self):
        """Return a list of available (empty) spots on the board."""
        return [i for i in range(9) if self.board[i] == EMPTY]
    
    def make_move(self, position, player):
        """Make a move on the board."""
        self.board[position] = player
    
    def minimax(self, depth, is_maximizing, alpha, beta):
        """Minimax algorithm with alpha-beta pruning."""
        if self.is_winner(PLAYER_X):
            return 1  # AI wins
        if self.is_winner(PLAYER_O):
            return -1  # Human wins
        if self.is_full():
            return 0  # Draw
        
        if is_maximizing:
            max_eval = float('-inf')
            for move in self.available_moves():
                self.make_move(move, PLAYER_X)
                eval = self.minimax(depth + 1, False, alpha, beta)
                self.board[move] = EMPTY  # Undo move
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval
        else:
            min_eval = float('inf')
            for move in self.available_moves():
                self.make_move(move, PLAYER_O)
                eval = self.minimax(depth + 1, True, alpha, beta)
                self.board[move] = EMPTY  # Undo move
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval
    
    def best_move(self):
        """Find the best move for the AI using Minimax with Alpha-Beta Pruning."""
        best_val = float('-inf')
        move = None
        for pos in self.available_moves():
            self.make_move(pos, PLAYER_X)
            move_val = self.minimax(0, False, float('-inf'), float('inf'))
            self.board[pos] = EMPTY  # Undo move
            if move_val > best_val:
                best_val = move_val
                move = pos
        return move
    
    def play(self):
        """Function to run the game."""
        while True:
            self.print_board()
            if self.current_player == 
